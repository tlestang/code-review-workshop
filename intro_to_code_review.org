#+REVEAL_THEME: white
#+OPTIONS: toc:nil  num:nil
* Notes
** Code Review
- Discussion over a piece of code. Typically between the author and a
  reviewer who provides feedback on code quality and/or functionality.
- Code review is fairly common in the software industry and open
  source communities.
- Code review is beneficial at different levels:
  + Increased code quality (.e.g readability)
  + Knowledge transfer and mentoring
  + Team awareness and group ownership of the project.
  + Reduction of bus factor
  Overall code review benefits both individuals and a team's
  productivity and wellbeing.
- Code review can take different forms,
  - Synchronous (live) discussion.
  - Asynchronous discussion (email or development platforms like
    GitHub).
  - One to one (1 author and 1 reviewer)
  - Many to one
  - Many to many
  - ...
- The term "code review" can be confusing for people in academia.
  Code reviews are performed throughout a project, on small changes,
  as opposed to larger end-of-work reviews.
- The concept of code review is vague but all in all is about spending
  some time studying and reviewing somebody else's code and discussing
  your code with someone else. It's an investement of time and energy
  but you can get a lot out of it.
** Returns on investement
- Improved code quality.
  + Readability is difficult to self-assess. How can you tell if your
    code is readable? Code reviews are excellent at assessing
    readability. Few researchers submit a paper or grant proposal
    without several rounds of feedback by colleagues. Should code be
    different? If you think that no one will read your code or reuse
    it, think again.
  + Check for code consistency if contributing to a common codebase.
  + +Feedback on design decisions. Particularly important if you are+
    +writing a library.+
  + More generally, CR gives access to second pair of eyes. Catch sight
    of gotchas: performance, language idioms, design flaws, corner
    cases. "Second pair of eyes effect".
- Learning and knowledge transfer.
  + If you are new to a group, or new to programming, you often get a
    lot from a code review. Mentoring and disseminiation of best
    practices from more experienced to less experienced.
  + Keeps you on your toes. New patterns, solutions. Even two
    researchers with similar programming experience can learn a lot
    from comparing their different approaches.
  + Less experienced researchers are valuable reviewers. They are an
    excellent benchmark of readability and are rewarded with mentored
    exposure to more advanced practices.
  Regular code reviews within a resaerch group can quickly level the
  group up and raise less experienced member's condifence.
- Collaboration (other sideof the same coin)
  + Regular code reviews means regular interactions and discussions
    between members of a research team or community. This reinforce
    group awareness, trust and cohesion. Beyond productivity as a
    group, it makes work nicer.
  + Ongoing challenge with software sustainability because developers
    only contribute a few cyears. Situation where facing cryptic code
    but the person who wrote it left long ago. Solution to increase
    length of contracts, but code review can help spreading knowledge
    of code.
  + Opportunities to "talk code", instead of focusing on the
    science. Experimentalists discuss their tools all the time,
    research software developers can talk about theirs too. This in
    turn impacts the science.
  + Improved software sustainability. Typical timescale of research
    software is 3 years (or duration of a PhD/post-doc contract). Code
    reviews help spreading ownership of the code and transfer it to
    new arrivals.
** Good practices
- Small code reviews, often.
  + reviewing code demands strong focus.
  + if your code is reviewed regularly, you /have/ to keep it in a
    tidy state. I.e. you have to keep readers in mind.
  + Large, end-of-work reviews are daunting. Procrastination.
  + Resonance analogy. If single, strong push can only get a swing
    high. Smaller, regular pushes can get it higher.
  + Short reviews are less interupting and fit more easily in a diary.
- Acknowledge the code author's responsability.
  + Submit small and coherent set of changes.
  + Ensure good layout of the code.
  + Self-review, write tests.
  + Provide context to the reviewer.
- Start with a discussion.
  - Levels of experience should be acknowledged and expectations set
    before the review starts. A reviewer will look at the code
    differently whether they look for bugs or performance issues.
    + Example situation 1: Author is a begineer programmer and reviewer is
      experienced. Author thinks that code is slow but both agree that
      review should focus on readability.
    + Example situation 2: Author and reviewers are colleagues with
      similar level of programming experience. Author's code is
      performing surprinsigly badly. Both afree that they should have
      a look at performance and refrain from spending too much time on
      discussing language idioms and functionalities.
  - Be sure you understand the other person's context and mindset
    before reviewing code or engaging with feedback.
- What to look for depends on code review focus.
  + By default, focus on readability, then maintainability.
  + Debugging and performance optimization are much easier with
    readable code, but can cause more problems otherwise.
  + Variable and function names, complicated lines, duplicated
    code... examples are coming in the hands-on session.
- Don't be shy on positive dfeedback.
  + Don't force it, but remember that positive feedback is also
    valuable. If you learn something from the code you are reviewing,
    say it.
- Take difference of perspectives into account, at all times.
  + A "reasearcher who codes" will have a different perspective than a
    Research Software Engineer.
  + Adapting your feedback or explanations to the other's perspective
    is key to a succesful code review. Experienced programmers must
    force themselves to "state the obvious". Less experienced
    programmers must accept that some comments may seem pointless at
    first sight.
- The code is under review, not its author.
  - As a reviewer, acknowledge that author put himself in a vulnerable
    position by openning their work for feedback.
  - "You should rename this function" vs "This function could
    (should?) be renamed" vs "This function's name didn't help me
    understand what it does". A reviewer is better off raising
    questions for the author to reach their own conlusions, rather
    than expressing a judgement.
  - Authors must accept negative criticism of their code, or
    suggestion of alternatives.
  - If reviewer's feedback is deemed unfair or aggressive by the
    author, it is their prerogative to disengage from the review
    process.
** Getting started with code review
- Find reviewers
  + In your research group
  + In your lab
  + In your institution (code review club or network)
  + Ask your PI!
- Choose a code to review
  - Lower your expectations
  - Aim for 45 minutes max for a reviewer, rule of thumb 200 LOC.
  - Likely the whole codebase won't be reviewed. Pick a part that you
    are not confident about (or very confident if you wish to
    challenge your assumptions). Pick a part that is representative of
    your programming practices.
  - The reviewer can help choosing the code to review.
- Start with a conversation
  + If needed, introduce yourself, your background and relevant experience.
  + State any expectations for the review process.
  + As the author, provide reviewer with scientific and academic
    context. Example: this is a heavily numerical module that fits
    within a larger ecosystem. I have been working on this for the
    past couple of days. Example: This is a script that simplifies my
    own persnal experimental setup, I wrote it 2 years ago from
    another student's script.
  + Come up with a benefit or goal for the review. 
- Decide on the form and agree to a plan
  + prefer live discussion if possible. It makes it easier to identify
    the other person's mindset and build trust.
  + Give the reviewer some time to make their own independent
    ideas. For instance they receive the code in advance.
  + Small code reviews, often. If agreement to review a large
    codebase, agree on a series of meetings.
- Engage in code reviews on a weekly basis. Make it part of your and
  your group's routine.
* Slides
:PROPERTIES:
:REVEAL_THEME: white
:END:
** Code +Review+ Discussion
#+begin_notes
- Discussion over a piece of code. Typically between the author and a
  reviewer who provides feedback on code quality and/or functionality.
- Code review is common in the software industry and open
  source communities.
#+end_notes
#+ATTR_HTML: :width 60%
[[./alvaro-reyes-fSWOVc3e06w-unsplash.jpg]]
# ** CR is common practice
# Illustrate that CR is common among software developpers
** Code Review has many forms
- Live discussion
- Asynchronous discussion
- One to one
- Many to one
- One to many
** Not an academic peer review
#+begin_notes
- The term "code review" can be confusing for people in academia.
- Code reviews are performed throughout a project, on small changes,
  as opposed to larger end-of-work reviews.
- all in all is about spending some time studying and reviewing
  code. High-returns investement.
#+end_notes
#+ATTR_REVEAL: :frag (none none none appear appear) :frag_idx (- - - 1 1)
- Not anonymous
- Informal
- Low stakes
- Short
- Regular

** High rewards
:PROPERTIES:
:reveal_background: #228B22
:END:
#+begin_notes
  At the end of the day code review benefits both individuals and a team's
  productivity and wellbeing.
#+end_notes
- Code quality
- Knowledge transfer, mentoring
- Team awareness, common ownership
- Software sustainability

#+ATTR_REVEAL: :frag grow
Small investement, big returns.
** Is your code readable?
#+begin_notes
- Code reviews are excellent at assessing readability. How can you
  tell if your code is readable?
- Few researchers submit a paper or grant proposal without several
  rounds of feedback by colleagues.
- If you write collaboratively, code review can help everyone
  contribute code that is consistent with one another. Consistent in
  function names, module orga or errors/exception handling.
#+end_notes
#+CAPTION: The Turing Way project illustration by Scriberia. Used under a CC-BY 4.0 licence. DOI: 10.5281/zenodo.3332807.
#+ATTR_HTML: :width 60%
[[./readable-code.jpg]]
# ** Like spaghettis?
# :PROPERTIES:
# :reveal_background: ./spaghetti.png
# :END:x

** A "second pair of eyes"
#+begin_notes
- Sometimes you need someone else to see clearly.
- Proofreading a paper for the 5th time
- Code review gives you that second pair of eyes, tocatch perfromace
  gotchas, language idioms.
- Mere action of explaining your code to somebody gives you a new perspective.
#+end_notes
#+CAPTION: "To be fair, I am still to find something wrong with this new invention. Let's hope it lasts..."
#+ATTR_HTML: :width 60%
[[./gaston.png]]
** knowledge transfer

#+ATTR_HTML: :width 70%
[[./nesa-by-makers-IgUR1iX0mqM-unsplash.jpg]]
#+begin_notes
- Mentoring and disseminiation of best practices from more experienced
  to less experienced. Great for newbies / great for PIs and senior
  pppl
- Keeps you on your toes, see different solutions. Level the group up, raise confidence.
- Beginners should review as well.
#+end_notes
** Collaboration
:PROPERTIES:
:reveal_background: ./nick-fewings-ORSkFfgfEBI-unsplash.jpg
:END:

#+begin_notes
- Code review -> regular interactions/discussions. Strengthen group
  awareness, trust, cohension.
- Helps productivity but also makes your world nicer.
- People being aware of each other also has practical consequence: bus factor.
#+end_notes
# ** Why aren't you doing code review already?
# - You don't about it (enough)
# - You don't have time
# - You don't know who to do it with
# - You don't care about your code
# - You wouldn't know what to look for as a reviewer
# - You tried it once but it didn't feel very productive.
** Small but frequent code reviews
:PROPERTIES:
:reveal_background: #B22222
:END:
- reviewing demands strong focus
- Big code reviews are daunting.
- Short meetings fit better in a busy schedule
# ** Make sure beginners also review
# #+ATTR_REVEAL: :frag (none roll-in roll-in) :frag_idx (- 1 2)
# - If a beginner Python programmer understands my code, it is readable.
# - "Naive" point of views are valuable (expert blindspot).
# - Beginners won't stay beginners for long.

** Prefer live discussion
#+ATTR_HTML: :width 70%
[[./pexels-christina-morillo-1181469.jpg]]

#+begin_notes
- Easier to understand soneone else's mindet, put in their shoes.
- Also limited in time, don't have to wait fro someone to reply.
- Not always possible, use tools like GitLab or GitHub.
#+end_notes


** The author's part
- Isolate small, coherent chunk of code (< 200 lines)
- Provide context
- Tidy code ([[https://github.com/psf/black#readme][Black]], [[https://github.com/r-lib/styler#readme][styler]])
** 
[[./bad_PR.png]]

[[./bad_commits.png]]

** Start with a discussion
#+begin_notes
- If you don't know the other person, or start new CR process, have a chat w them.
- Make the most of the discussion if you understand the person's
  mindet/expectation. You can adapt your communication. Good to have a
  goeal in mind. Readability is often a good choice.
- Goal will depend on how familiar the reviewer is with the code.
- Collaborative dev: have some ground guidelines for review. Make sure
  that everybody agrees with priorities.
#+end_notes
Make sure you clarify
- Expectations
- Mindsets
- Level of experience

#+ATTR_REVEAL: :frag grow
Agree on what to focus on

** Perspectives often differ
[[./boat-land.jpg]]
** Review the code, not its author(s)
:PROPERTIES:
:reveal_background: #CD5C5C
:END:
#+ATTR_REVEAL: :frag (appear appear appear appear appear) :frag_idx (1 2 3 4 5)
- "Whoever named this function can't code".
- "You named this function badly".
- "This function could (should?) be renamed".
- "I thought this function's name was misleading".
- "You could perhaps give this function a more explicit name? I think
  it'd make this part of the code much clearer".

** How do I get started?
#+ATTR_REVEAL: :frag (none appear appear appear appear) :frag_idx (- 1 2 3 4)
1. Find reviewers
2. Choose a chunk of code to review
3. Start with a conversation
4. Decide on the form and agree on a plan
5. Do code reviews often (weekly)

